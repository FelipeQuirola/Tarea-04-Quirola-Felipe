import numpy as np
import matplotlib.pyplot as plt
import math
from typing import Callable

# Parte a
X = np.linspace(-10, 10, 100)

# Gráfica de y = tan(x)
Y = np.tan(X)
plt.plot(X, Y)
plt.xlabel('x')
plt.ylabel('y')
plt.title('Gráfica de la ecuación $y = \\tan{x}$')
ax = plt.gca()
ax.set_ylim([-10, 10])
ax.set_xlim([-10, 10])
plt.grid(True)
plt.show()

# Parte b
def bisection(
    a: float, b: float, *, equation: Callable[[float], float], tol: float, N: int
) -> tuple[float, int] | None:
    assert a < b, "a not lower than b, the interval is not valid."
    assert (
        equation(a) * equation(b) < 0
    ), "The function does not change sign over the interval."
    
    Fa = equation(a)
    
    for i in range(N):
        p = a + (b - a) / 2
        FP = equation(p)
        if FP == 0 or (b - a) / 2 < tol:
            return p, i
        if sign(Fa) * sign(FP) > 0:
            a = p
            Fa = FP
        else:
            b = p
    
    return p, i

def sign(x: float) -> int:
    if x > 0:
        return 1
    elif x < 0:
        return -1
    else:
        return 0

r, i = bisection(
    a = -1.2, 
    b = 1,
    equation = lambda x: math.tan(x), 
    tol = 10**(-5), 
    N = 20
)
print(f'La bisección dio como resultado la raíz {r} en {i} iteraciones')
